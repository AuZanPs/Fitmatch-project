-- GEMINI CACHE TABLE SCHEMA
-- This table stores cached responses from the Gemini API

-- Create the gemini_cache table
CREATE TABLE IF NOT EXISTS public.gemini_cache (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  request_hash TEXT NOT NULL UNIQUE,
  request_data JSONB NOT NULL, -- Store original request for debugging
  gemini_response JSONB NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  last_accessed_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  access_count INTEGER DEFAULT 1 NOT NULL
);

-- Add indexes for efficient lookups
CREATE INDEX IF NOT EXISTS idx_gemini_cache_request_hash ON public.gemini_cache(request_hash);
CREATE INDEX IF NOT EXISTS idx_gemini_cache_user_id ON public.gemini_cache(user_id);
CREATE INDEX IF NOT EXISTS idx_gemini_cache_created_at ON public.gemini_cache(created_at);
CREATE INDEX IF NOT EXISTS idx_gemini_cache_last_accessed_at ON public.gemini_cache(last_accessed_at);

-- Grant permissions
ALTER TABLE public.gemini_cache ENABLE ROW LEVEL SECURITY;

-- Only allow users to see their own cached results
CREATE POLICY "Users can view their own cached results" ON public.gemini_cache
  FOR SELECT USING (auth.uid() = user_id);

-- Admin policy for cleanup operations
CREATE POLICY "Service role can manage all cache entries" ON public.gemini_cache
  USING (auth.jwt() ->> 'role' = 'service_role');

-- Comment on table and columns
COMMENT ON TABLE public.gemini_cache IS 'Stores cached responses from Gemini API to reduce API calls and improve performance';
COMMENT ON COLUMN public.gemini_cache.request_hash IS 'Hash of the request parameters for quick lookups';
COMMENT ON COLUMN public.gemini_cache.request_data IS 'Original request data for debugging purposes';
COMMENT ON COLUMN public.gemini_cache.gemini_response IS 'The cached response from Gemini API';
COMMENT ON COLUMN public.gemini_cache.access_count IS 'Number of times this cache entry has been accessed';